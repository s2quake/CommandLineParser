//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JSSoft.Library.Commands.Repl.Properties {
    using System;
    
    
    /// <summary>
    ///   지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
    /// </summary>
    // 이 클래스는 ResGen 또는 Visual Studio와 같은 도구를 통해 StronglyTypedResourceBuilder
    // 클래스에서 자동으로 생성되었습니다.
    // 멤버를 추가하거나 제거하려면 .ResX 파일을 편집한 다음 /str 옵션을 사용하여 ResGen을
    // 다시 실행하거나 VS 프로젝트를 다시 빌드하십시오.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("JSSoft.Library.Commands.Repl.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
        ///   재정의합니다.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.
        ///
        ///The &quot;index&quot; holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the conten[나머지 문자열은 잘림]&quot;;과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string AddDescription {
            get {
                return ResourceManager.GetString("AddDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Add file contents to the index과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string AddSummary {
            get {
                return ResourceManager.GetString("AddSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   With no options and no COMMAND or GUIDE given, the synopsis of the git command and a list of the most commonly used Git commands are printed on the standard output.
        ///
        ///If the option --all or -a is given, all available commands are printed on the standard output.
        ///
        ///If the option --guide or -g is given, a list of the useful Git guides is also printed on the standard output.
        ///
        ///If a command, or a guide, is given, a manual page for that command or guide is brought up. The man program is used by default for thi[나머지 문자열은 잘림]&quot;;과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string HelpDescription {
            get {
                return ResourceManager.GetString("HelpDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Display help information about Git과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string HelpSummary {
            get {
                return ResourceManager.GetString("HelpSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Add modified contents in the working tree interactively to the index. Optional path arguments may be supplied to limit operation to a subset of the working tree. See “Interactive mode” for details.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string InteractiveDescription_AddCommand {
            get {
                return ResourceManager.GetString("InteractiveDescription_AddCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   List the stashes that you currently have. Each stash is listed with its name (e.g. stash@{0} is the latest stash, stash@{1} is the one before, etc.), the name of the branch that was current when the stash was made, and a short description of the commit the stash was based on.
        ///
        ///stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation
        ///stash@{1}: On master: 9cc0589... Add git-stash
        ///The command takes options applicable to the git log command to control what is shown and how. See git-log[1].과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string ListDescription_AddCommand {
            get {
                return ResourceManager.GetString("ListDescription_AddCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   List the stashes that you currently have. Each stash is listed with its name (e.g. stash@{0} is the latest stash, stash@{1} is the one before, etc.), the name of the branch that was current when the stash was made, and a short description of the commit the stash was based on.
        ///
        ///stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation
        ///stash@{1}: On master: 9cc0589... Add git-stash
        ///The command takes options applicable to the git log command to control what is shown and how. See git-log[1].과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string ListDescription_StashCommand {
            get {
                return ResourceManager.GetString("ListDescription_StashCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Interactively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.
        ///
        ///This effectively runs add --interactive, but bypasses the initial command menu and directly jumps to the patch subcommand. See “Interactive mode” for details.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string PatchDescription_AddCommand {
            get {
                return ResourceManager.GetString("PatchDescription_AddCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   you can interactively select hunks from the diff between HEAD and the working tree to be stashed. The stash entry is constructed such that its index state is the same as the index state of your repository, and its worktree contains only the changes you selected interactively. The selected changes are then rolled back from your worktree. See the “Interactive Mode” section of git-add[1] to learn how to operate the --patch mode.과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string PatchDescription_StashCommand {
            get {
                return ResourceManager.GetString("PatchDescription_StashCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Files to add content from. Fileglobs (e.g. *.c) can be given to add all matching files. Also a leading directory name (e.g. dir to add dir/file1 and dir/file2) can be given to update the index to match the current state of the directory as a whole (e.g. specifying dir will record not just a file dir/file1 modified in the working tree, a file dir/file2 added to the working tree, but also a file dir/file3 removed from the working tree. Note that older versions of Git used to ignore removed files; use --no-all[나머지 문자열은 잘림]&quot;;과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string PathDescription_AddCommand {
            get {
                return ResourceManager.GetString("PathDescription_AddCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Save your local modifications to a new stash, and run git reset --hard to revert them. The &lt;message&gt; part is optional and gives the description along with the stashed state. For quickly making a snapshot, you can omit both &quot;save&quot; and &lt;message&gt;, but giving only &lt;message&gt; does not trigger this action to prevent a misspelled subcommand from making an unwanted stash.
        ///
        ///If the --keep-index option is used, all changes already added to the index are left intact.
        ///
        ///If the --include-untracked option is used, all u[나머지 문자열은 잘림]&quot;;과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string SaveDescription_StashCommand {
            get {
                return ResourceManager.GetString("SaveDescription_StashCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit.
        ///
        ///The modifications stashed away by this command can be listed with git stash list, inspected with git stash show, and restored (potentially on top of a different commit) with git stash apply. Calling git stash without any arguments is equivalent to git sta[나머지 문자열은 잘림]&quot;;과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string StashDescription {
            get {
                return ResourceManager.GetString("StashDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Stash the changes in a dirty working directory away과(와) 유사한 지역화된 문자열을 찾습니다.
        /// </summary>
        public static string StashSummary {
            get {
                return ResourceManager.GetString("StashSummary", resourceCulture);
            }
        }
    }
}
