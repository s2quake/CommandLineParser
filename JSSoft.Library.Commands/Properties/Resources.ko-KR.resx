<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Text_Summary" xml:space="preserve">
    <value>요약</value>
  </data>
  <data name="Text_Usage" xml:space="preserve">
    <value>사용법</value>
  </data>
  <data name="Text_Description" xml:space="preserve">
    <value>설명</value>
  </data>
  <data name="Text_Example" xml:space="preserve">
    <value>예제</value>
  </data>
  <data name="Text_Requirements" xml:space="preserve">
    <value>필수 인자</value>
  </data>
  <data name="Text_Variables" xml:space="preserve">
    <value>가변 인자</value>
  </data>
  <data name="Text_Options" xml:space="preserve">
    <value>선택 인자</value>
  </data>
  <data name="Text_AvaliableCommands" xml:space="preserve">
    <value>사용 가능한 명령들</value>
  </data>
  <data name="Text_Subcommands" xml:space="preserve">
    <value>하위 명령어</value>
  </data>
  <data name="Message_Help_Format" xml:space="preserve">
    <value>도움말을 사용하시려면 '{0}'을(를) 입력하세요.</value>
  </data>
  <data name="Message_Version_Format" xml:space="preserve">
    <value>버전을 확인하시려면 '{0}'을(를) 입력하세요. </value>
  </data>
  <data name="Exception_InvalidCommandName_Format" xml:space="preserve">
    <value>'{0}' 은(는) 잘못된 명령어 입니다.</value>
  </data>
  <data name="Exception_DelimiterMustBePunctuation" xml:space="preserve">
    <value>구분 기호는 문장 부호여야 합니다.</value>
  </data>
  <data name="Exception_MethodDoesNotExist_Format" xml:space="preserve">
    <value>'{0}' 은(는) 존재하지 않는 메소드(method)입니다.</value>
  </data>
  <data name="Exception_MemberDoesNotExist_Format" xml:space="preserve">
    <value>'{0}' 은(는) 존재하지 않는 멤버(member)입니다.</value>
  </data>
  <data name="Exception_InvalidArgumentType" xml:space="preserve">
    <value>잘못된 형식의 인자입니다.</value>
  </data>
  <data name="Exception_CannotConvert_Format" xml:space="preserve">
    <value>'{0}' 은(는) 변환할 수 없습니다.</value>
  </data>
  <data name="Exception_EmptyStringsAreNotAllowed" xml:space="preserve">
    <value>빈 문자열은 사용할 수 없습니다.</value>
  </data>
  <data name="Exception_CommandAlreadyExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 이미 존재하는 명령어입니다.</value>
  </data>
  <data name="Exception_CommandDoesNotExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 존재하지 않는 명령어입니다.</value>
  </data>
  <data name="Exception_NameAlreadyExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 이미 존재하는 이름입니다.</value>
  </data>
  <data name="Exception_NameDoesNotExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 존재하지 않는 이름입니다.</value>
  </data>
  <data name="Exception_TypeIsNotStaticClass" xml:space="preserve">
    <value>해당 타입은 static class가 아닙니다.</value>
  </data>
  <data name="Exception_ShortNameMustBe_AlphabetCharacter" xml:space="preserve">
    <value>짧은 이름은 알파벳이여야만 합니다.</value>
  </data>
  <data name="Exception_NameLengthMustBeGreaterThanOne" xml:space="preserve">
    <value>이름은 최소 2자리 이상이여야만 합니다.</value>
  </data>
  <data name="Exception_PropertyAlreadyExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 이미 존재하는 속성입니다.</value>
  </data>
  <data name="Exception_PropertyDoesNotExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 존재하지 않는 속성입니다.</value>
  </data>
  <data name="Exception_PropertyCannotUse_Format" xml:space="preserve">
    <value>'{0}' 은(는) 사용할 수 없는 속성입니다.</value>
  </data>
  <data name="Exception_AttributeAlreadyExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 이미 존재하는 특성입니다.</value>
  </data>
  <data name="Exception_AttributeDoesNotExists_Format" xml:space="preserve">
    <value>'{0}' 은(는) 존재하지 않는 특성입니다.</value>
  </data>
  <data name="Exception_InvalidValue_Format" xml:space="preserve">
    <value>'{0}' (은)는 잘못된 값입니다.</value>
  </data>
  <data name="Exception_VariablesCannotBeUsedAsMultiple_Format" xml:space="preserve">
    <value>'{0}' 은(는) 여러개로 사용할 수 없습니다.</value>
  </data>
  <data name="Exception_VariablesPropertyMustBeAnArrayType_Format" xml:space="preserve">
    <value>'{0}' 속성은 배열 타입이여야만 합니다.</value>
  </data>
  <data name="Exception_NotProperty_Format" xml:space="preserve">
    <value>'{0}' 은(는) 속성이 아닙니다.</value>
  </data>
  <data name="Exception_Trigger_CannotUseProperty_Format" xml:space="preserve">
    <value>'{0}' 은(는) 사용할 수 없습니다.  속성 '{1}' 은(는) 값이 '{2}' 이여야만 합니다.</value>
  </data>
  <data name="Exception_Trigger_CannotUsePropertyNot_Format" xml:space="preserve">
    <value>'{0}' 은(는) 사용할 수 없습니다.  속성 '{1}' 은(는) 값이 '{2}' 이(가) 아니여야 합니다.</value>
  </data>
  <data name="Exception_ValudIsNotSet_Format" xml:space="preserve">
    <value>'{0}'의 값이 설정되지 않았습니다.</value>
  </data>
</root>